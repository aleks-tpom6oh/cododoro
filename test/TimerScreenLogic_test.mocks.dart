// Mocks generated by Mockito 5.0.15 from annotations
// in cododoro/test/TimerScreenLogic_test.dart.
// Do not manually edit this file.

import 'dart:ui' as _i4;

import 'package:cododoro/models/ElapsedTimeModel.dart' as _i3;
import 'package:cododoro/models/TimerModel.dart' as _i5;
import 'package:cododoro/models/TimerStates.dart' as _i6;
import 'package:cododoro/storage/HistoryRepository.dart' as _i7;
import 'package:cododoro/storage/Settings.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeSharedPreferences_0 extends _i1.Fake
    implements _i2.SharedPreferences {}

/// A class which mocks [ElapsedTimeModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockElapsedTimeModel extends _i1.Mock implements _i3.ElapsedTimeModel {
  MockElapsedTimeModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get elapsedTime =>
      (super.noSuchMethod(Invocation.getter(#elapsedTime), returnValue: 0)
          as int);
  @override
  int get elapsedTimeMs =>
      (super.noSuchMethod(Invocation.getter(#elapsedTimeMs), returnValue: 0)
          as int);
  @override
  set elapsedTime(dynamic newTime) =>
      super.noSuchMethod(Invocation.setter(#elapsedTime, newTime),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void onTick({bool? addTime}) =>
      super.noSuchMethod(Invocation.method(#onTick, [], {#addTime: addTime}),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
  @override
  void addListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [TimerStateModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerStateModel extends _i1.Mock implements _i5.TimerStateModel {
  MockTimerStateModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.TimerStates get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i6.TimerStates.sessionWorking) as _i6.TimerStates);
  @override
  set state(dynamic newState) =>
      super.noSuchMethod(Invocation.setter(#state, newState),
          returnValueForMissingStub: null);
  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);
  @override
  bool get isWorking =>
      (super.noSuchMethod(Invocation.getter(#isWorking), returnValue: false)
          as bool);
  @override
  bool get isOvertime =>
      (super.noSuchMethod(Invocation.getter(#isOvertime), returnValue: false)
          as bool);
  @override
  bool get isResting =>
      (super.noSuchMethod(Invocation.getter(#isResting), returnValue: false)
          as bool);
  @override
  bool get isChilling =>
      (super.noSuchMethod(Invocation.getter(#isChilling), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool isRunning() =>
      (super.noSuchMethod(Invocation.method(#isRunning, []), returnValue: false)
          as bool);
  @override
  void pauseResume() => super.noSuchMethod(Invocation.method(#pauseResume, []),
      returnValueForMissingStub: null);
  @override
  void forceResume() => super.noSuchMethod(Invocation.method(#forceResume, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
  @override
  void addListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [HistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHistoryRepository extends _i1.Mock implements _i7.HistoryRepository {
  MockHistoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SharedPreferences get prefs =>
      (super.noSuchMethod(Invocation.getter(#prefs),
          returnValue: _FakeSharedPreferences_0()) as _i2.SharedPreferences);
  @override
  set prefs(_i2.SharedPreferences? _prefs) =>
      super.noSuchMethod(Invocation.setter(#prefs, _prefs),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void startSession(_i7.IntervalType? type) =>
      super.noSuchMethod(Invocation.method(#startSession, [type]),
          returnValueForMissingStub: null);
  @override
  void stopStanding() =>
      super.noSuchMethod(Invocation.method(#stopStanding, []),
          returnValueForMissingStub: null);
  @override
  void saveSession(
          DateTime? endTime, _i7.IntervalType? type, Duration? duration) =>
      super.noSuchMethod(
          Invocation.method(#saveSession, [endTime, type, duration]),
          returnValueForMissingStub: null);
  @override
  void updateCurrentStandingSession({bool? addTime = true}) =>
      super.noSuchMethod(
          Invocation.method(
              #updateCurrentStandingSession, [], {#addTime: addTime}),
          returnValueForMissingStub: null);
  @override
  void updateCurrentPomodoroSession(DateTime? endTime, Duration? duration) =>
      super.noSuchMethod(
          Invocation.method(#updateCurrentPomodoroSession, [endTime, duration]),
          returnValueForMissingStub: null);
  @override
  void toggleSessionType(_i7.Interval? interval) =>
      super.noSuchMethod(Invocation.method(#toggleSessionType, [interval]),
          returnValueForMissingStub: null);
  @override
  bool removeSession(_i7.Interval? interval) =>
      (super.noSuchMethod(Invocation.method(#removeSession, [interval]),
          returnValue: false) as bool);
  @override
  Iterable<_i7.StoredInterval> getTodayIntervals() =>
      (super.noSuchMethod(Invocation.method(#getTodayIntervals, []),
          returnValue: <_i7.StoredInterval>[]) as Iterable<_i7.StoredInterval>);
  @override
  String toString() => super.toString();
  @override
  void addListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [Settings].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettings extends _i1.Mock implements _i8.Settings {
  MockSettings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SharedPreferences get prefs =>
      (super.noSuchMethod(Invocation.getter(#prefs),
          returnValue: _FakeSharedPreferences_0()) as _i2.SharedPreferences);
  @override
  set prefs(_i2.SharedPreferences? _prefs) =>
      super.noSuchMethod(Invocation.setter(#prefs, _prefs),
          returnValueForMissingStub: null);
  @override
  int get workDuration =>
      (super.noSuchMethod(Invocation.getter(#workDuration), returnValue: 0)
          as int);
  @override
  int get restDuration =>
      (super.noSuchMethod(Invocation.getter(#restDuration), returnValue: 0)
          as int);
  @override
  bool get standingDesk =>
      (super.noSuchMethod(Invocation.getter(#standingDesk), returnValue: false)
          as bool);
  @override
  int get targetStandingMinutes =>
      (super.noSuchMethod(Invocation.getter(#targetStandingMinutes),
          returnValue: 0) as int);
  @override
  int get dayHoursOffset =>
      (super.noSuchMethod(Invocation.getter(#dayHoursOffset), returnValue: 0)
          as int);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void setWorkDuration(int? newDuration) =>
      super.noSuchMethod(Invocation.method(#setWorkDuration, [newDuration]),
          returnValueForMissingStub: null);
  @override
  void setRestDuration(int? newDuration) =>
      super.noSuchMethod(Invocation.method(#setRestDuration, [newDuration]),
          returnValueForMissingStub: null);
  @override
  void setStandingDesk(bool? newStandingDesk) =>
      super.noSuchMethod(Invocation.method(#setStandingDesk, [newStandingDesk]),
          returnValueForMissingStub: null);
  @override
  void setTargetStandingMinutes(int? newTargetStandingMinutes) =>
      super.noSuchMethod(
          Invocation.method(
              #setTargetStandingMinutes, [newTargetStandingMinutes]),
          returnValueForMissingStub: null);
  @override
  void setDayHoursOffset(int? newDayHoursOffset) => super.noSuchMethod(
      Invocation.method(#setDayHoursOffset, [newDayHoursOffset]),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
  @override
  void addListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
